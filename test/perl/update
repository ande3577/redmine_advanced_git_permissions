#!/usr/bin/perl

my $redmine_url = "http://0.0.0.0:3000";
my $ws_key = "000000";
my $git_root = "/var/www/git/";

# Set to true to diagnose issues, false to reduce clutter
my $verbose = 0;
my $test = 1;

my $message = "";

if ($verbose) {
  use warnings;
}

sub get_repository_name {
 my $location = $_[0];
  my ($repository) = $location =~ m{^$git_root/*(.+)};
  $repository;
}

sub get_project_identifier {
  my $location = $_[0];
  $location =~ s/\.git$//;
  my ($identifier) = $location =~ m{^$git_root/*([^/.]+)};
  $identifier;
}

sub trim($)
{
	my $string = shift;
	$string =~ s/^\s+//;
	$string =~ s/\s+$//;
	return $string;
}

my $ref_name = $ARGV[0];
my $old_ref = $ARGV[1];
my $new_ref = $ARGV[2];
my $user = $test ? $ARGV[3] : $ENV{'GIT_COMMITTER_NAME'};
my $work_dir = $test ? "/var/www/git/test.git" : trim(`pwd -D`);
my $repository = $work_dir;
my $project = get_project_identifier($work_dir);


my $zero="0000000000000000000000000000000000000000";


sub grant {
  if($verbose) {
    ($reason) = @_;
    print("Access Granted: $reason\n");
  }
  exit(0);
}

sub deny {
  ($reason) = @_;
  print("Access Denied: $reason\n");
  exit(0);
}

sub get_project_identifier {
    my $location = $_[0];
    $location =~ s/\.git$//;
    my ($identifier) = $location =~ m{$git_root/*([^/.]+)};
    $identifier;
}

sub read_url {
	use LWP;
	my $browser = LWP::UserAgent->new;
	
	print "reading @_\n" 	if ($verbose);
  $response = $browser->get( @_ );
  print $response->status_line if ($verbose);
  $message = $response->content;
  if( $response->is_success ) {
	  print "Success!!!\n" 	if ($verbose);
    return 1;
  } else {
 	  print "Failure!!!\n" 	if ($verbose);
    return 0;
  }
}

sub allow_create_branch {
	$url = "$redmine_url/projects/$project/branch/create?user_name=$user&branch=$_[0]&repository=$repository&key=$ws_key";
	print "url = $url\n" 	if ($verbose);
  return read_url($url);
}

sub allow_delete_branch {
	$url = "$redmine_url/projects/$project/branch/delete?user_name=$user&branch=$_[0]&repository=$repository&key=$ws_key";
	print "url = $url\n" 	if ($verbose);
  return read_url($url);
}

sub allow_update_branch {
	$url = "$redmine_url/projects/$project/branch/update?user_name=$user&branch=$_[0]&repository=$repository&ff=$_[1]&key=$ws_key";
	print "url = $url\n" 	if ($verbose);
  return read_url($url);
}

sub allow_create_tag {
	$url = "$redmine_url/projects/$project/tag/create?user_name=$user&tag=$_[0]&annotated=$_[1]&repository=$repository&key=$ws_key";
	print "url = $url\n" 	if ($verbose);
  return read_url($url);
}

sub allow_delete_tag {
	$url = "$redmine_url/projects/$project/tag/delete?user_name=$user&tag=$_[0]&repository=$repository&key=$ws_key";
	print "url = $url\n" 	if ($verbose);
  return read_url($url);
}

sub allow_update_tag {
	$url = "$redmine_url/projects/$project/tag/update?user_name=$user&tag=$_[0]&annotated=$_[1]&repository=$repository&key=$ws_key";
	print "url = $url\n" 	if ($verbose);
  return read_url($url);
}

my $commit_type;
if ( $new_ref eq $zero) {
  $commit_type = 'delete';
} else {
  $commit_type = trim(`/usr/bin/git cat-file -t $new_ref`);
}

if ($verbose) {
  print("user = $user\n");
  print("ref_name = $ref_name\n");
  print("old_ref = $old_ref\n");
  print("new_ref = $new_ref\n");
  print("commit_type = $commit_type\n\n");
}

if ($ref_name  =~ "^refs/heads/") {
  $short_name = $ref_name;
  $short_name =~ s/refs\/heads\///;

  if ( $verbose ) { print("$short_name is a branch\n"); }

  if ( $old_ref eq $zero ) {
  	if (allow_create_branch($short_name)) {
	  	grant("Permission granted!");  
	  } else {
		  deny($message);
	  }
  } elsif ( $new_ref eq $zero ) {
  	if (allow_delete_branch($short_name)) {
  		grant("Permission granted!");  
  	} else {
	    deny($message);
    }
  } else {
    #updating an existing branch
    $merge_base = trim(`git merge-base $old_ref $new_ref`);
    if ( $verbose ) { print("merge-base = $merge_base\n") };
    if ( allow_update_branch($short_name, $merge_base ne $old_ref)) {
      grant("Permission granted");
    } else {
      deny($message);
    }
  }

} elsif ($ref_name  =~ "^refs/tags/") {
  $short_name = $ref_name;
  $short_name =~ s/refs\/tags\///;
  if ( $verbose ) { print("$short_name is a tag\n"); }
  if ( $new_ref eq $zero ) {
  	if ( allow_delete_tag($short_name) ) {
	    grant("Permission granted");
	  } else {
	  	deny($message);
	 	}
  } elsif ( $old_ref ne $zero ) {
  	if ( allow_update_tag($short_name, $commit_type eq "tag") ) {
  		grant("Permission granted");  	
    } else {
	    deny($message);
    }
  } elsif ( allow_create_tag($short_name, $commit_type eq "tag") ) {
  	grant("Permission granted");
  } else {
    deny($message);
  } 
} else {
  deny ("$ref_name is not a branch or tag.");
}

deny("Unknown error");







